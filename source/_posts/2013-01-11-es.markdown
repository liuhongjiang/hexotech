---
layout: post
title: "elasticsearch之基本操作"
date: 2013-01-11 17:08
comments: true
categories: 3rd&nbsp;tools 
math: 
abstract: 本文简单介绍了elasticsearch的HTTP API中的插入、删除、更新、查找、搜索功能。 
---

[elasticsearch](http://www.elasticsearch.org)是一个是开源的（Apache2协议），分布式的，[RESTful](http://zh.wikipedia.org/zh-cn/REST)的，构建在[Apache Lucene](http://lucene.apache.org/)之上的的搜索引擎。 

它有很多特点例如Schema Free，Document Oriented。它是#nosql的，基于JSON，同时支持多种API，包括HTTP, thrift, memcached。支持HTTP,是比较爽的一点，因为基本上所有的应用都可以用ES了，页面上的js脚本都可以去查询。


## 安装

启动和安装特别简单，在[ES下载页面](http://www.elasticsearch.org/download/)下载zip或者tar包后，解压，然后到elasticsearch的目录下，运行下面的命令就可以了。

``` bash
bin/elasticsearch -f
```

搭建集群也非常简单，在同网段的机器上，启动es后，它们会自动组建成一个集群，并完成数据的分布式存储，查询时也会按照分布式的方式去查找。

好了恭喜你，现在你已经可以搭建ES单机版和ES集群了，一切都这么简单。

<!-- more -->

下面我们就来看一下ES的HTTP的API的插入、删除、更新、查找、搜索的功能吧，（ES安装在ubuntu server 64位 12.04LTS）。

## 插入

先来一个简单的官方例子，插入的参数为`-XPUT`，插入一条记录。

    $ curl -XPUT 'http://localhost:9200/twitter/tweet/1' -d '{
        "user" : "kimchy",
        "post_date" : "2009-11-15T14:12:12",
        "message" : "trying out Elastic Search"
    }'
{: .sh-bash}

执行结果如下图所示，绿色框内的内容是ES返回的执行结果：

``` bash
andrew@ubuntu:~$ curl -XPUT 'http://localhost:9200/twitter/tweet/1' -d '{
>     "user" : "kimchy",
>     "post_date" : "2009-11-15T14:12:12",
>     "message" : "trying out Elastic Search"
> }'
{"ok":true,"_index":"twitter","_type":"tweet","_id":"1","_version":6}andrew@ubuntu:~$
```

从上面的这个例子中，可以看出ES的http的服务的默认端口9200，后面的`/twitter/tweet/1`是这条记录的索引部分。

这也就体现了它的RESTful风格，所有的记录都是通过URI确定。这三级目录分布对应了`_index`，`_type`, `_id`（绿框内可以看出来）。实际上ES上存放的所有的记录都只能通过三级目录的方式找到，不能多也不能少。

`_id`字段可以是数字也可以是字符串。在执行上面的命令时ES会自动创建这些索引。`-d`后面跟上了要插入的json格式的记录。

`-XPUT`表明这是插入一条数据，ES中叫创建一个索引。ES返回的结果中，一个`_version`字段，表明了当前记录的版本号，当你想这个索引重新put一条记录时，版本号会自动加一。

## 删除

删除的http请求参数为`-XDELETE`，通过下面的命令可以删除这条记录：

    curl -XDELETE 'http://localhost:9200/twitter/tweet/1'
{: .sh-commands}

删除这条记录的时候，`_verison`也会自动加一的。

## 查询

创建了一个索引后，可以通过下面的方式查询（参数`-XGET`）出来:

    curl -XGET 'http://localhost:9200/twitter/tweet/1'
{: .sh-commands}

执行上面的查询命令，可以等到下面的结果：

    andrew@ubuntu:~$ curl -XGET 'http://localhost:9200/twitter/tweet/1'
    {"_index":"twitter","_type":"tweet","_id":"1","_version":5,"exists":true, "_source" : {
        "user" : "kimchy",
        "post_date" : "2009-11-15T14:12:12",
        "message" : "trying out Elastic Search"
    }}andrew@ubuntu:~$ 
{: .sh-bash}

`exists`表示是否有查询结果，`_source`字段是查询到的记录。

查询的时候，可以将`_type`设置成为`_all`，ES就会返回在`_index`下所有type中，第一个匹配`_id`的记录。

还可以通过参数对返回结果继续控制，例如：用fields选取返回的字段，用pretty控制返回的json格式是否更阅读友好。`format=yaml`可以设置输入格式为YAML。
下面是两个例子

``` bash
curl -XGET 'http://localhost:9200/twitter/tweet/1?fields=message,user&pretty=true'
curl -XGET 'http://localhost:9200/twitter/tweet/1?fields=message,user&format=yaml'
```

当然ES还支持一次查询多组记录，即multi get，在URI中是使用关键字`_mget`，具体可以参考ES的文档[multi get](http://www.elasticsearch.org/guide/reference/api/multi-get.html)。

## 更新

ES同样支持更新，但是更新的方式是通过一个提供的脚本进行的。ES的做法是，通过index找到相应的存放记录的节点，然后执行脚本，执行完之后，返回新的索引。实际上执行的是一个get和reindex的过程，在这个过程中，通过versioning来控制没有其它的更新操作（这个功能是0.19后可用的）。具体实现的原理应该和[elasticsearch Versioning](http://www.elasticsearch.org/blog/2011/02/08/versioning.html)相关。

get，reindex的含义是，ES先取出这条记录，然后根据新数据生成新记录，然后在把新记录放回到ES中（并不会覆盖老的记录）。

首先创建一条记录

    $ curl -XPUT localhost:9200/test/type1/1 -d '{
        "counter" : 1,
        "tags" : ["red"]
    }'
{: .sh-bash}

将counter的值加4

    $ curl -XPOST 'localhost:9200/test/type1/1/_update' -d '{
        "script" : "ctx._source.counter += count",
        "params" : {
            "count" : 4
        }
    }'
{: .sh-bash}

也可以添加一个tag的值

    $ curl -XPOST 'localhost:9200/test/type1/1/_update' -d '{
        "script" : "ctx._source.tags += tag",
        "params" : {
            "tag" : "blue"
        }
    }'
{: .sh-bash}

现在还支持upsert功能，即在更新的时候，如果记录没有这个key，则插入这个key，下面是一个例子，如果没有`counter`字段，则插入该字段：

    $ curl -XPOST 'localhost:9200/test/type1/1/_update' -d '{
        "script" : "ctx._source.counter += count",
        "params" : {
            "count" : 4
        },
        "upsert" : {
            "counter" : 1
        }
    }'
{: .sh-bash}

关于update还有其它很多功能，可以参考[ES的API update](http://www.elasticsearch.org/guide/reference/api/update.html)

## 搜索

elasticsearch的名字里面有一个search，那么主要功能也是search了。

es的search有两种形式，一是通过URI，二是通过Requst Body。通过URI查询，即将查询的语句放入到请求的url中，例如：

    curl -XGET 'http://localhost:9200/twitter/tweet/_search?q=user:kimchy'
{: .sh-commands}

第二种方式，即在查询的请求中加入一个doc

    $ curl -XGET 'http://localhost:9200/twitter/tweet/_search' -d '{
        "query" : {
            "term" : { "user" : "kimchy" }
        }
    }'
{: .sh-bash}

query body的定义可以查看[query DSL](http://www.elasticsearch.org/guide/reference/query-dsl/)
另外两种查询方式都可以带参数，参数的含义参考[URI Request](http://www.elasticsearch.org/guide/reference/api/search/uri-request.html)和[Request Body](http://www.elasticsearch.org/guide/reference/api/search/request-body.html)。

ES的搜索功能是可以跨index和type的，例如下面这几条命令

``` bash
curl -XGET 'http://localhost:9200/twitter/_search?q=user:kimchy'
curl -XGET 'http://localhost:9200/twitter/tweet,user/_search?q=user:kimchy'
curl -XGET 'http://localhost:9200/kimchy,elasticsearch/tweet/_search?q=tag:wow'
curl -XGET 'http://localhost:9200/_all/tweet/\_search?q=tag:wow'
curl -XGET 'http://localhost:9200/\_search?q=tag:wow'
```

第一条是在所有的`twitter`这个index下的所有type中查找，第二条是在`tweet,user`这两个type中查找，第三条是在`kimchy,elasticsearch`这两个index的`tweet`这个type中查找，第四条使用了`_all`关键字，是在所有的index的`tweet`的type中查找，第五条更暴力，在所有的index和type中查找。

查找还有其它的很多选项，[sort](http://www.elasticsearch.org/guide/reference/api/search/sort.html)，[高亮](http://www.elasticsearch.org/guide/reference/api/search/highlighting.html)，选取返回记录的域[Fields](http://www.elasticsearch.org/guide/reference/api/search/fields.html)，还可以对返回的域使用一个脚本进行计算[script Fields](http://www.elasticsearch.org/guide/reference/api/search/script-fields.html)，或者对返回结果继续统计[Facets](http://www.elasticsearch.org/guide/reference/api/search/facets/)，Facets的内容比较多，它支持关键词统计，范围内统计，直方图式统计，日期的直方图式统计，过滤，查询，还有记录地理位置距离的统计[geo distance](http://www.elasticsearch.org/guide/reference/api/search/facets/geo-distance-facet.html)。
支持名字过滤[Named Filters](http://www.elasticsearch.org/guide/reference/api/search/named-filters.html)。
定义搜索类型[Search Type ](http://www.elasticsearch.org/guide/reference/api/search/search-type.html)。例如什么Query And Fetch，Query Then Fetch。
索引加速的功能[Index Boost](http://www.elasticsearch.org/guide/reference/api/search/index-boost.html)，可以让某一个索引的权重大于另外一个。
保持上次检索的环境了结果[Scroll](http://www.elasticsearch.org/guide/reference/api/search/scroll.html)。保留每一个命中的score值[Explain](http://www.elasticsearch.org/guide/reference/api/search/explain.html)。
设置命中的[min_score](http://www.elasticsearch.org/guide/reference/api/search/min-score.html)。保留版本号[Version](http://www.elasticsearch.org/guide/reference/api/search/version.html)。

Search的参数很多，我也没有一一看，不过果然是名字里面有个search，对检索的各种场景都有支持。

当然还支持多个查询multi search，例如下面这个例子

    $ cat requests
    {"index" : "test"}
    {"query" : {"match_all" : {}}, "from" : 0, "size" : 10}
    {"index" : "test", "search_type" : "count"}
    {"query" : {"match_all" : {}}}
    {}
    {"query" : {"match_all" : {}}}

    $ curl -XGET localhost:9200/_msearch --data-binary @requests; echo
{: .sh-bash}

## 小结

以上就是elasticsearch的基本的几个功能了。当然它还有其它的很多功能，大家可以上<http://www.elasticsearch.org>去查看。

ES是基于Lucene的，有很多概念是直接来自于它，所有要想深入学习ES，还得有点Lucene的基础。

总的，感觉elasticsearch是一个比较强大的工具，而且对社交网络的支持比较好，而且使用方便，配置简单，就不知道稳定性如何了。

下面是两篇不错的文章，大家也可以借鉴一下：

* <http://blog.csdn.net/laigood12345/article/details/7421173>
* <http://www.qwolf.com/?p=1387>

还有elasticsearch的中文站点<http://www.elasticsearch.cn/>，不过这个网站还在构建中，翻译工作也才刚刚开始，大家就期盼早点完成。
