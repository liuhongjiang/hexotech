---
layout: post
title: "虚函数"
date: 2012-11-29 09:30
comments: true
categories: C/C++
---

面试的时候，常常宣称自己是一个C++程序员，不免就会被问一些有关C++的问题，例如虚函数的实现原理；析构函数是否能定义为虚函数等等。很多时候都回答不上来，就总会以时间久了忘了，搪塞过去，面试完，可能回去查查答案，但也总是不求甚解。

既然有了博客，我就准备看看这些方面的内容，希望能记录下来，有所积累。于是就到网上查,或在书上找找，后来发现里面的内容太多了，不是一篇两篇博客就能写完的。于是没有办法，就只有硬着头皮写一个系列了。今天是第一部分虚函数和虚继承。

C++的关键字virtual只能用在两个地方，一是定义类的成员函数为虚函数，二是定义类的继承关系为虚继承。这两点的用处大相径庭，但是在设计思想上还是有一定的共同性的。这篇文章先讲虚函数，下一篇讲虚继承。

<!-- more -->

## 虚函数

虚，不实也。也可以理解为看到的和实际的不一样。虚函数存在的目的只有一个，那就是实现多态。关于多态，可以去参考各种教科书，上面都有详细的说明。虚函数在实现多态时，通过一种间接的运行时（而不是编译时）的机制激活（调用）的函数。下面看一个多态的简单例子。

{% include_code 多态的简单例子 lang:cpp 2012/polymorphism/polymorphism.cc %}

运行结果如下[^1]:

{% img center /images/blogimages/2012/polymorphism/polymorphism_output.jpg %}

从运行结果来看，函数`call_func()`最后实际调用的`f()`要到运行时，根据传入的参数，才能确定调用的是哪个函数。

那么虚函数的这种性质是如何实现的呢？答案是虚表(vtable)。具体的做法是，在对象的存储空间里面开辟一个指针，指针指向一个存放着虚函数地址的函数指针表。编译器在生成调用虚函数的指令时，按照偏移量，从虚表中取相应的函数指针进行调用。子类的虚函数会覆盖父类中对应虚函数在虚表中的位置，所以在调用的时候，就调用到了子类的函数了。也许这段话没有说太清楚，下面看一段代码或许会有帮助。

{% include_code 测试虚表的例子 lang:cpp 2012/polymorphism/vfun.cc %} 

输出结果如下：

{% img center /images/blogimages/2012/polymorphism/vfun_output.jpg %}

上面这段代码的第20行，通过定义指针的方式[^2]，直接访问虚表，发现它的输出与通过对象调用是一直的，而且指针的类型无关。由上面的代码也可以看出虚表在对象的内存空间中是怎么分布的。对象的起始地址，就是虚表指针。虚表的最后一项为0，代表虚表结束。上面程序的最后一项输出可以看出来。

用一张图来说明情况。

{% img center /images/blogimages/2012/polymorphism/one_derived.jpg %}

在多个虚函数的情况下，子类仅仅覆盖在子类重载的虚函数，而子类新定义的虚函数，加入到虚表的最后。下面这个例子就是多个虚函数的情况。

{% include_code 多个虚函数 lang:cpp 2012/polymorphism/vfun1.cc %}

输出结果：

{% img center /images/blogimages/2012/polymorphism/vfun1_output.jpg %}

虚表的组织结构如下:

{% img center /images/blogimages/2012/polymorphism/more_derived.jpg %}

由图中可以看出，子类的`f()`覆盖了基类的`f()`，而基类的`f0()`依然存在，子类的`f1()`添加到了虚表的最后。

当有多个基类时，子类会为每个基类添加一个虚表指针，指针的顺序按照类定义时的声明顺序。下面这个例子就是这样的。

{% include_code 虚函数多重继承 lang:cpp 2012/polymorphism/vfun2.cc %}

输出结果：

{% img center /images/blogimages/2012/polymorphism/vfun2_output.jpg %}

这是一个比较复杂的继承关系了，可以看出最后的`derived`类里面已经有3个虚表指针了，也就是说，子类会讲所有的父类的虚表继承下来，并将自己的虚函数添加到第一个虚表的最后。还有一点，就是子类的虚函数会覆盖所有基类的对应虚函数，图中的`derived::f()`就覆盖了3处。其组织结构如下：

{% img center /images/blogimages/2012/polymorphism/more_bases.jpg %}

[^1]: 系统为ubuntu 12.04 server 64bit, 编译器为gcc 4.6.3 
[^2]: 程序运行在64位机器上，所以使用long进行强制转换获取指针，如果在32位服务器上，就应该用int。

## 构造函数和析构函数的调用顺序

这个问题本来和虚函数没有关系，但是为了后面解释关于构造函数为什么不能声明为virtual，添加到这里的。

构造函数的调用顺序是，先调用父类的构造函数，然后调用成员变量的构造函数，最后调用子类自身的构造函数，多个父类时，按照父类的继承时的声明顺序调用，成员变量的构造函数也按照声明顺序调用。

析构函数的调用顺序与构造函数的正好相反，先调用子类自身的析构函数，然后是成员变量的析构函数，最后是父类的构造函数，多个父类时，按照父类的继承时的声明的相反顺序调用，成员变量的构造函数也按照声明的相反顺序调用。

下面是一段测试调用顺序的代码

{% include_code 构造和析构函数的调用顺序 lang:cpp 2012/polymorphism/constructor_destructor_order.cc %}

输出结果
{% img center /images/blogimages/2012/polymorphism/constructor_destructor_order.jpg %}

从输出结果可以看出，先调用了`base_b`的构造函数，然后调用`base_a`的构造函数（但得先调用`base_a`的父类`father_base_a`），然后是成员`member_a`和`member_b`的构造函数，最后是`derived`自己的构造函数。析构的过程正好相反。

## 构造函数不能声明为虚函数

这也是面试中常被问道的一个问题。原因应该有两个  

1. 在构造函数之前，类的对象是不存在的，那么也没有vtable，也无法通过vtable找到虚函数。所有无法定义为虚函数。
2. 构造函数是先调用父类，最后才是子类的构造，因为子类的内存布局是基于父类。如果使用虚构函数，那么在调用父类的构造函数时，实际调用的是子类的构造函数，那么就无法完成对象的构造。
3. 虚函数的主要目的是多态，运行时确定调用那个函数，对象的构造过程是确定的，使用虚函数没有意义。

实际上，如果将构造函数声明为虚函数，编译时，gcc会报错。

{% img center /images/blogimages/2012/polymorphism/constructor_error.jpg %}

## 析构函数声明为虚函数

在基类的声明中一般都应该将析构函数声明为虚函数。首先由于析构函数没有构造函数的问题，所以是可以声明为虚函数的。其次，可能程序需要利用析构函数为虚函数的特性，才能讲资源释放完全。

首先来看一个代码例子

{% include_code 析构函数为虚函数 lang:cpp 2012/polymorphism/destructor_virtual.cc %}

运行结果

{% img center /images/blogimages/2012/polymorphism/destructor_virtual.jpg %}

由结果可以看出，由于`base1`的析构函数没有声明为虚函数，在`delete pbase1`时，没有调用`derived1`的析构函数，那么在`derived1`中申请的资源就无法释放。而因为`base`类中的修改函数声明为了虚函数，就没有这样的问题。

## 什么时候使用虚函数

包含了虚函数的成员函数的对象，由于需要存放虚表地址，那么就比不包含虚函数的对象，多出了一块空间，32位为4个字节，64位为8个字节。如果没有用到多态，而且有大量的对象存在时，需要考虑这个开销。

在需要使用多态，或在定义接口时，需要使用虚函数。特别是定义接口时，最好使用纯虚函数。

另外，将私有成员函数声明为虚函数，可以通过对象的虚表指针的方式访问，造成了封装的不严密。例如，通过在前面的例子中定义的`VTAB`宏，就可以直接获取函数指针，然后调用函数，这种调用是需要检查这个成员函数的性质的。

## 同名函数隐藏规则

在父类和子类中如果存在同名的函数，那么一定要小心了，这时需要重载父类中所有同名的函数。首先来看一个关于同名函数的例子

{% include_code  诡异的同名函数 lang:cpp 2012/polymorphism/same_name.cc %}

输出结果

{% img center /images/blogimages/2012/polymorphism/same_name.jpg %}

注意在用不同类型的类指针调用`g()`,`h()`,`m()`三个函数时，程序实际的行为。

这样会带来一个问题，就是在继承后，重载了父类的一个函数，或在定义了一个函数，那么父类中与这个函数同名的函数都会被隐藏，子类的对象无法调用这些函数。

下面是一个例子

{% include_code  诡异的同名函数 lang:cpp 2012/polymorphism/same_name1.cc %}

在编译的时候会报这样的错误

{% img center /images/blogimages/2012/polymorphism/same_name1_error.jpg %}

## 总结

1. 虚函数是通过虚表实现运行时绑定。虚表存放在对象的起始位置。子类继承父类时，会将所有的虚表就继承下来，所有子类可能有多个虚表指针。如果子类重载了父类的某个虚函数，那么子类将重写<em style="color:red">所有虚表</em>中该函数的地址，子类将自己的虚函数添加到第一个虚表的最后。
2. 构造函数不能声明为虚函数，析构函数可以声明为虚函数，当类包含是虚函数的成员函数时，析构函数<em style="color:red">必须声明为虚函数</em>。
3. 当子类和父类有同名函数时，父类的所有与这个函数同名的函数都将被隐藏，子类的对象无法访问到。

### 参考

本文参考了以下文章：

1. 陈皓.[C++ 虚函数表解析](http://blog.csdn.net/haoel/article/details/1948051/)
2. [C++ Virtual详解](http://www.cnblogs.com/xd502djj/archive/2010/09/22/1832912.html)
